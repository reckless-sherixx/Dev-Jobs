// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  stripeCustomerId String? @unique

  userType UserType?

  onboardingCompleted Boolean @default(false)

  Company   Company?
  JobSeeker JobSeeker?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SavedJobPost SavedJobPost[]
  notifications Notification[]
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Company {
  id String @id @default(uuid())

  name     String
  location String
  about    String
  logo     String
  website  String
  linkedin String?

  JobPost JobPost[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobSeeker {
  id String @id @default(uuid())

  name   String
  about  String
  resume String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Application Application[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model JobPost {
  id String @id @default(uuid())

  jobTitle        String
  employmentType  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  jobDescription  String
  listingDuration Int
  benefits        String[]

  status JobPostStatus @default(DRAFT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company  @relation(fields: [companyId], references: [id])
  companyId String

  SavedJobPost SavedJobPost[]
  Application  Application[]
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

model SavedJobPost {
  id String @id @default(uuid())

  JobPost   JobPost @relation(fields: [jobPostId], references: [id])
  jobPostId String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobPostId])
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  IN_PROGRESS
  SELECTED
  REJECTED
}

enum InterviewRoundStatus {
  PENDING
  QUALIFIED
  NOT_QUALIFIED
}

model Application {
  id String @id @default(uuid())
  JobPost JobPost @relation(fields: [jobPostId], references: [id])
  jobPostId String
  JobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId String
  name String
  about String
  resume String
  status ApplicationStatus @default(PENDING)
  currentRound Int @default(1)
  InterviewRounds InterviewRound[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InterviewRound {
  id String @id @default(uuid())
  application Application @relation(fields: [applicationId], references: [id])
  applicationId String
  roundNumber Int
  status InterviewRoundStatus @default(PENDING)
  feedback String?
  interviewDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(uuid())
  userId String
  title String
  message String
  read Boolean @default(false)
  type String // "ROUND_UPDATE", "SELECTION", "REJECTION"
  applicationId String
  createdAt DateTime @default(now())
  User User @relation(fields: [userId], references: [id])
}